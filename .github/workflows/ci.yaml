name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'
  FLUTTER_VERSION: '3.32.8'

jobs:
  # Backend Testing
  test-backend:
    name: Test Backend API
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: quote_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8.2.1-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('apps/api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd apps/api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          cd apps/api
          cat > .env << EOF
          ENVIRONMENT=test
          DEBUG=false
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/quote_test_db
          REDIS_URL=redis://localhost:6379/1
          SECRET_KEY=test-secret-key-for-ci
          SENTRY_DSN=
          EOF

      - name: Run database migrations
        run: |
          cd apps/api
          # Create Alembic configuration if migrations exist
          if [ -f alembic.ini ]; then
            alembic upgrade head
          else
            echo "No migrations found, skipping..."
          fi

      - name: Run linting (Ruff)
        run: |
          cd apps/api
          ruff check . --output-format=github

      - name: Run type checking (mypy)
        run: |
          cd apps/api
          mypy src/ --ignore-missing-imports

      - name: Run backend tests
        run: |
          cd apps/api
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/api/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing
  test-frontend:
    name: Test Flutter Mobile App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install Flutter dependencies
        run: |
          cd apps/mobile
          flutter pub get

      - name: Install shared packages dependencies
        run: |
          cd packages/ui-components
          flutter pub get

      - name: Run Flutter analyzer
        run: |
          cd apps/mobile
          flutter analyze . --fatal-infos

      - name: Run Flutter tests
        run: |
          cd apps/mobile
          flutter test --coverage --reporter=expanded

      - name: Generate coverage report
        run: |
          cd apps/mobile
          # Install lcov for coverage processing
          sudo apt-get update -qq -y
          sudo apt-get install -qq -y lcov
          # Generate LCOV coverage report
          genhtml coverage/lcov.info -o coverage/html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/mobile/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Shared Types Testing
  test-shared-types:
    name: Test Shared Types
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd packages/shared-types && npm install

      - name: Run TypeScript compilation
        run: |
          cd packages/shared-types
          npm run build

      - name: Run linting
        run: |
          cd packages/shared-types
          npm run lint

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Build and Deploy (only on main branch)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-shared-types, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.AWS_ECR_REGISTRY }}/quote-api:latest
            ${{ secrets.AWS_ECR_REGISTRY }}/quote-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Flutter for build
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Build Flutter APK
        run: |
          cd apps/mobile
          flutter pub get
          flutter build apk --release --build-number=${{ github.run_number }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: quote-app-apk
          path: apps/mobile/build/app/outputs/flutter-apk/app-release.apk

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-shared-types, security-scan]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' && needs.test-shared-types.result == 'success' && needs.security-scan.result == 'success' }}
        run: echo "✅ All tests passed successfully!"

      - name: Notify failure
        if: ${{ needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' || needs.test-shared-types.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: |
          echo "❌ Some tests failed!"
          exit 1