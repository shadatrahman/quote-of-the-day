version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17.6
    container_name: quote-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: quote_of_the_day_dev
      POSTGRES_USER: quote_user
      POSTGRES_PASSWORD: quote_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quote_user -d quote_of_the_day_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - quote-network

  # Redis Cache
  redis:
    image: redis:8.2.1-alpine
    container_name: quote-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - quote-network

  # PostgreSQL Test Database (for testing)
  postgres-test:
    image: postgres:17.6
    container_name: quote-postgres-test
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: quote_test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d quote_test_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - quote-network
    profiles:
      - test

  # Redis Test Instance (for testing)
  redis-test:
    image: redis:8.2.1-alpine
    container_name: quote-redis-test
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --appendonly no --requirepass ""
    networks:
      - quote-network
    profiles:
      - test

  # FastAPI Development Server (optional - can run locally)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    container_name: quote-api-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://quote_user:quote_password@postgres:5432/quote_of_the_day_dev
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - ./apps/api:/app
      - /app/venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quote-network
    profiles:
      - full-stack

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: quote-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - quote-network
    profiles:
      - tools

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: quote-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    depends_on:
      - redis
    networks:
      - quote-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local

networks:
  quote-network:
    driver: bridge
    name: quote-network